[main]
# authc是org.apache.shiro.web.filter.authc.FormAuthenticationFilter类型实例
# 默认的loginUrl是 /login.jsp
# 配置理由: 当未登录的时候，访问需要认证的页面(需要经过auth拦截器的url)时, 会跳转到这个/login请求
authc.loginUrl=/login
# authc.usernameParam=username     # 指定登录时表单提交的用户名参数名
# authc.passwordParam=password     # 指定登录时表单提交的密码参数名
# authc.successUrl=/               # 指定登录成功后重定向的默认地址
# 指定登录失败时的request属性key(默认为shiroLoginFailure),在代码中用 request.getAttribute("key")来获取
# authc.failureKeyAttribute=shiroLoginFailure

# 配置需要经过authBasic拦截器的urls未登录时，显示表单的提示信息
# authcBasic.applicationName=please login

# 当访问某个请求需要某个特定角色，而用户不具备(在[urls]中配置url需要某角色)时，跳转的url
# 注: 在程序中用 checkRole 方法检查是否含有角色(而[urls]中未配置)时，当不具备某角色时，请求不会转发到此url
roles.unauthorizedUrl=/unauthorized
# perms作用与roles类似
perms.unauthorizedUrl=/unauthorized

# 配置自定义的每次请求只调用一次的拦截器
# customOncePerRequestFilter = com.zachard.shiro.web.filter.CustomOncePerRequestFilter

[filters]
# 配置自定义实现的拦截器(也可在main中进行配置)
customOncePerRequestFilter = com.zachard.shiro.web.filter.CustomOncePerRequestFilter
customAdviceFilter = com.zachard.shiro.web.filter.CustomAdviceFilter
customPathMatchingFilter = com.zachard.shiro.web.filter.CustomPathMatchingFilter

[users]
zhang=123,admin
wang=123

[roles]
admin=user:*,menu:*

[urls]
# /login=anon
/unauthorized=anon
/static/**=anon
/authenticated=authc
/role=authc,roles[admin]
/permission=authc,perms["user:create"]

# 表示对/role的url请求需要经过拦截器(拦截器未通过时，会一直显示密码验证框)
# 并且拥有角色为admin的用户才能访问(当不具备角色时，跳转到roles.unauthorizedUrl配置的url)
# 也可以在代码中用checkRole检查用户需要具备的角色
# /role=authcBasic,roles[admin]

# 配置自定义拦截器拦截的url (注: 如何上面的 /login 没有被注释，访问 /login 不会经过此拦截器, 可能是 anon 拦截器的原因)
/** = customOncePerRequestFilter, customAdviceFilter, customPathMatchingFilter[config]
